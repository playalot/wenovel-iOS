//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `btn_add`.
    static let btn_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_add")
    /// Image `btn_radom`.
    static let btn_radom = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_radom")
    /// Image `btn_send`.
    static let btn_send = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_send")
    /// Image `control_mask_view`.
    static let control_mask_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "control_mask_view")
    /// Image `novel_gray_bg`.
    static let novel_gray_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "novel_gray_bg")
    
    /// `UIImage(named: "btn_add", bundle: ..., traitCollection: ...)`
    static func btn_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_radom", bundle: ..., traitCollection: ...)`
    static func btn_radom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_radom, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_send", bundle: ..., traitCollection: ...)`
    static func btn_send(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_send, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "control_mask_view", bundle: ..., traitCollection: ...)`
    static func control_mask_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.control_mask_view, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "novel_gray_bg", bundle: ..., traitCollection: ...)`
    static func novel_gray_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.novel_gray_bg, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `NovelCardCollectionViewCell`.
    static let novelCardCollectionViewCell = _R.nib._NovelCardCollectionViewCell()
    
    /// `UINib(name: "NovelCardCollectionViewCell", in: bundle)`
    static func novelCardCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.novelCardCollectionViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `NovelCardCollectionViewCell`.
    static let novelCardCollectionViewCell: Rswift.ReuseIdentifier<NovelCardCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "NovelCardCollectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `MainViewController`, and contains static references to 2 segues.
    struct mainViewController {
      /// Segue identifier `SendNewNovel`.
      static let sendNewNovel: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, SendViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SendNewNovel")
      /// Segue identifier `ShowDetail`.
      static let showDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, DetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowDetail")
      
      /// Optionally returns a typed version of segue `SendNewNovel`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func sendNewNovel(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, SendViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.sendNewNovel, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShowDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, DetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.showDetail, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `DetailViewController`.
    static let detailViewController = _R.storyboard.detailViewController()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainViewController`.
    static let mainViewController = _R.storyboard.mainViewController()
    /// Storyboard `SendViewController`.
    static let sendViewController = _R.storyboard.sendViewController()
    
    /// `UIStoryboard(name: "DetailViewController", bundle: ...)`
    static func detailViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detailViewController)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "MainViewController", bundle: ...)`
    static func mainViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainViewController)
    }
    
    /// `UIStoryboard(name: "SendViewController", bundle: ...)`
    static func sendViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sendViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _NovelCardCollectionViewCell.validate()
    }
    
    struct _NovelCardCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NovelCardCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NovelCardCollectionViewCell"
      let name = "NovelCardCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NovelCardCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NovelCardCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "novel_gray_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'novel_gray_bg' is used in nib 'NovelCardCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try mainViewController.validate()
      try sendViewController.validate()
      try launchScreen.validate()
    }
    
    struct detailViewController: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = DetailViewController
      
      let bundle = R.hostingBundle
      let name = "DetailViewController"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_add") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_add' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "control_mask_view") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'control_mask_view' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "novel_gray_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'novel_gray_bg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_radom") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_radom' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct mainViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "MainViewController"
      
      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_add") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_add' is used in storyboard 'MainViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_radom") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_radom' is used in storyboard 'MainViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "control_mask_view") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'control_mask_view' is used in storyboard 'MainViewController', but couldn't be loaded.") }
        if _R.storyboard.mainViewController().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'MainViewController' as 'MainViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct sendViewController: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SendViewController
      
      let bundle = R.hostingBundle
      let name = "SendViewController"
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_send") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_send' is used in storyboard 'SendViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}